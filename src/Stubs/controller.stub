<?php

namespace {{namespace}}Http\Controllers\{{base_namespace_small}};

use {{namespace}}Http\Controllers\Controller;
use {{namespace}}Models\{{singular}};
use {{namespace}}Models\Role;
use {{namespace}}Repositories\Interfaces\{{singular}}RepositoryInterface;
use {{namespace}}Http\Requests\{{singular}}\Store{{singular}}Request;
use Illuminate\Routing\Controllers\Middleware;
use Spatie\Permission\Middleware\PermissionMiddleware;
use {{namespace}}Http\Requests\{{singular}}\Update{{singular}}Request;
use Illuminate\Http\Request;

class {{singular}}Controller extends Controller
{
    public function __construct(
        protected {{singular}}RepositoryInterface $repository
    ) {}

    public static function middleware(): array
    {
        $middlewares = [
            new Middleware('auth:admin'),
        ];

        foreach ({{singular}}::getPermissions() as $permission => $methods) {
            $middlewares[] = new Middleware(PermissionMiddleware::using($permission), only: $methods);
        }
        return $middlewares;
    }

    public function index(Request $request)
    {
        $perPageSessionKey = 'per_page_{{variable}}';

        if ($request->filled('export')) {
            return $this->repository->export($request, $perPageSessionKey);
        }
        $trashedCount = $this->repository->getTrashedCount();
        $roles = Role::active()->get();
        ${{snakePlural}} = $this->repository->all($request, $perPageSessionKey);
        return view('{{base_namespace_small}}.{{snakePlural}}.index', get_defined_vars());
    }

    public function store(Store{{singular}}Request $request)
    {
        ${{variable}} = $this->repository->add($request);
        if (${{variable}}) {
            return redirect()->route('{{base_namespace_small}}.{{snakePlural}}.index')
                ->with('toast_success', __('{{base_namespace_small}}.created_successfully'));
        }
        return redirect()->back()
            ->with('toast_error', __('{{base_namespace_small}}.something_went_wrong'));
    }
    public function create()
    {
        $countries = $this->repository->getActiveScopedCountry();
        $roles = $this->repository->getRole();
        return view('{{base_namespace_small}}.{{snakePlural}}.create', get_defined_vars());
    }

    public function edit({{singular}} ${{variable}})
    {
        $countries = $this->repository->getActiveScopedCountry();
        $roles = $this->repository->getRole();
        $selectedCountryId = ${{variable}}->country_id;
        $selectedNationalityId = ${{variable}}->nationality_id;
        return view('{{base_namespace_small}}.{{snakePlural}}.edit', get_defined_vars());
    }

    public function update(Update{{singular}}Request $request, string $uuid)
    {
        $result = $this->repository->update($uuid, $request);
        if ($result) {
            return redirect()->route('{{base_namespace_small}}.{{snakePlural}}.index')
                ->with('toast_success', __('{{base_namespace_small}}.updated_successfully'));
        }
        return redirect()->back()
            ->with('toast_error', __('{{base_namespace_small}}.something_went_wrong'));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $uuid)
    {
        $this->repository->delete($uuid);
        return redirect()->back()
            ->with('toast_success', __('{{base_namespace_small}}.archived_successfully'));
    }

    public function archive(Request $request)
    {

        $perPageSessionKey = 'per_page_{{snakePlural}}';
        $archived{{plural}} = $this->repository->getArchived($request, $perPageSessionKey);
        return view('{{base_namespace_small}}.{{snakePlural}}.archived', get_defined_vars());
    }

    public function restore($uuid)
    {
        $this->repository->restore($uuid);
        return redirect()->route('{{base_namespace_small}}.{{snakePlural}}.archive')
            ->with('toast_success', __('{{base_namespace_small}}.restored_successfully'));
    }

    public function forceDelete($uuid)
    {
        $result = $this->repository->forceDelete($uuid);
        if ($result) {
            return redirect()->route('{{base_namespace_small}}.{{snakePlural}}.archive')
                ->with('toast_success', lang('{{base_namespace_small}}.deleted_successfully'));
        }
        return redirect()->route('{{base_namespace_small}}.{{snakePlural}}.archive')
            ->with('toast_error', __('{{base_namespace_small}}.something_went_wrong'));

    }

    public function changeActive(Request $request, $id)
    {
        ${{variable}} = {{singular}}::findOrFail($id);
        if ($request->status == 'active') {
            ${{variable}}->is_active = true;
        } else {
            ${{variable}}->is_active = false;
        }
        ${{variable}}->save();

        return redirect()->back()->with('toast_success', __('{{base_namespace_small}}.updated_successfully'));

    }
}
